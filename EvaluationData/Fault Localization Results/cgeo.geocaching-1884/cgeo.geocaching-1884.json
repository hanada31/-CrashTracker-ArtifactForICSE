{
	"Crash Info in Dataset":{
		"Apk name":"cgeo.geocaching-1884",
		"Method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
		"Crash Message":"no such column: reliable_latlon: , while compiling: insert into cg_caches_temp select _id,updated,detailed,detailedupdate,visiteddate,geocode,reason,cacheid,guid,type,name,own,owner,owner_real,hidden,hint,size,difficulty,terrain,latlon,location,direction,distance,latitude,longitude,reliable_latlon,elevation,personal_note,shortdesc,description,favourite_cnt,rating,votes,myvote,disabled,archived,members,found,favourite,inventorycoins,inventorytags,inventoryunknown,onWatchlist from cg_caches",
		"stack trace":[
			"android.database.sqlite.SQLiteCompiledSql.native_compile",
			"android.database.sqlite.SQLiteCompiledSql.<init>",
			"android.database.sqlite.SQLiteProgram.compileSql",
			"android.database.sqlite.SQLiteProgram.compileAndbindAllArgs",
			"android.database.sqlite.SQLiteStatement.acquireAndLock",
			"android.database.sqlite.SQLiteStatement.executeUpdateDelete",
			"android.database.sqlite.SQLiteDatabase.executeSql",
			"android.database.sqlite.SQLiteDatabase.execSQL",
			"cgeo.geocaching.cgData$DbHelper.onUpgrade",
			"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
			"cgeo.geocaching.cgData.init",
			"cgeo.geocaching.cgData.clean",
			"cgeo.geocaching.cgeoapplication.cleanDatabase",
			"cgeo.geocaching.cgeo$cleanDatabase.run",
			"cgeo.geocaching.cgData.access$400",
			"cgeo.geocaching.cgData$DbHelper.onUpgrade",
			"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
			"cgeo.geocaching.cgData.init",
			"cgeo.geocaching.cgData.clean",
			"cgeo.geocaching.cgeoapplication.cleanDatabase",
			"cgeo.geocaching.cgeo$cleanDatabase.run"
		],
		"Labeled Buggy Method":"cgeo.geocaching.cgData$DbHelper.onUpgrade"
	},
	"Fault Localization by CrashTracker":{
		"Buggy Method Candidates":[
			{
				"Candidate Name":"cgeo.geocaching.cgData$DbHelper.onUpgrade",
				"Candidate Score":100,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgData$DbHelper.onUpgrade"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$DbHelper.onCreate",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{"$ref":"$.Fault\\ Localization\\ by\\ CrashTracker.Buggy\\ Method\\ Candidates[0].Reasons[1]"}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.init",
				"Candidate Score":98,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgData.init"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$DbHelper.createIndices",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$DbHelper.removeDoubleUnderscoreMapFiles",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.access$200",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.access$300",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.access$400",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgData.access$400"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.clean",
				"Candidate Score":97,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgData.clean"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$1.<init>",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$1.run",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData$DbHelper$1.<init>",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgData.access$102$138603",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgeoapplication.cleanDatabase",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgeoapplication.cleanDatabase"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.cgeo$cleanDatabase.run",
				"Candidate Score":95,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteCompiledSql.native_compile",
						"Trace":[
							"cgeo.geocaching.cgeo$cleanDatabase.run"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.utils.Log.e",
				"Candidate Score":85,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"cgeo.geocaching.utils.Log.i",
				"Candidate Score":83,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<cgeo.geocaching.cgData$DbHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String toString()>",
							"<cgeo.geocaching.utils.Log: void e(java.lang.String,java.lang.Throwable)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<cgeo.geocaching.cgData$DbHelper: void removeDoubleUnderscoreMapFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>",
							"<cgeo.geocaching.cgData$DbHelper$1: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$400()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<cgeo.geocaching.cgData: void access$300(android.database.sqlite.SQLiteDatabase)>",
							"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>",
							"<cgeo.geocaching.cgData$1: void run()>",
							"<java.util.ArrayList: java.util.Iterator iterator()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: boolean deleteDirectory(java.io.File)>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<cgeo.geocaching.cgData$1: void <init>(java.util.ArrayList)>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>",
							"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>",
							"<java.util.regex.Matcher: boolean find()>",
							"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>",
							"<java.io.File: java.lang.String getName()>",
							"<java.io.File: boolean isDirectory()>",
							"<java.util.ArrayList: void <init>(int)>",
							"<java.io.File: java.io.File[] listFiles()>",
							"<android.support.v4.app.ActivityCompatHoneycomb: java.io.File getStorageSpecific(boolean)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<cgeo.geocaching.cgData: boolean access$102$138603()>",
							"<cgeo.geocaching.cgData$DbHelper: void createIndices(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<cgeo.geocaching.cgData: void access$200(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: void endTransaction()>",
							"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>",
							"<cgeo.geocaching.utils.Log: void i(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<cgeo.geocaching.cgData$DbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			}
		],
		"None-Code Labels":[]
	}
}