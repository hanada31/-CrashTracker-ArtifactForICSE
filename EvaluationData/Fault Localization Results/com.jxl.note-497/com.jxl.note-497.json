{
	"Crash Info in Dataset":{
		"Apk name":"com.jxl.note-497",
		"Method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
		"Crash Message":"no such table: sqlite_sequence (code 1): , while compiling: update sqlite_sequence set seq=0 where name='note'",
		"stack trace":[
			"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
			"android.database.sqlite.SQLiteConnection.acquirePreparedStatement",
			"android.database.sqlite.SQLiteConnection.prepare",
			"android.database.sqlite.SQLiteSession.prepare",
			"android.database.sqlite.SQLiteProgram.<init>",
			"android.database.sqlite.SQLiteStatement.<init>",
			"android.database.sqlite.SQLiteDatabase.executeSql",
			"android.database.sqlite.SQLiteDatabase.execSQL",
			"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion3",
			"com.jxl.note.db.NoteProvider$DatabaseHelper.onUpgrade",
			"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
			"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase",
			"com.jxl.note.db.NoteProvider.getDatabase",
			"com.jxl.note.db.NoteProvider.query",
			"android.content.ContentProvider.query",
			"android.content.ContentProvider$Transport.query",
			"android.content.ContentResolver.query",
			"android.content.ContentResolver.query",
			"com.jxl.note.db.NoteContent.query",
			"com.jxl.note.db.NoteContent$NoteInfo.getAllItems",
			"com.jxl.note.NoteList.bindData",
			"com.jxl.note.NoteList.onCreate",
			"android.app.Activity.performCreate",
			"android.app.Instrumentation.callActivityOnCreate",
			"android.app.ActivityThread.performLaunchActivity"
		],
		"Labeled Buggy Method":"com.jxl.note.db.NoteProvider$DatabaseHelper.createNoteInfo"
	},
	"Fault Localization by CrashTracker":{
		"Buggy Method Candidates":[
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion3",
				"Candidate Score":100,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion3"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.onUpgrade",
				"Candidate Score":99,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteProvider$DatabaseHelper.onUpgrade"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.onCreate",
				"Candidate Score":97,
				"Reasons":[
					{"$ref":"$.Fault\\ Localization\\ by\\ CrashTracker.Buggy\\ Method\\ Candidates[1].Reasons[1]"}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.createDatabase",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion1",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion2",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.updateVersion6",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider.getDatabase",
				"Candidate Score":96,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteProvider.getDatabase"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.content.ContentProvider.query",
							"<com.jxl.note.db.NoteProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
							"<android.content.UriMatcher: int match(android.net.Uri)>",
							"<com.jxl.note.db.NoteProvider: java.lang.String whereWithId(long,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>(int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.ContentUris: long parseId(android.net.Uri)>",
							"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
							"<android.content.Context: android.content.ContentResolver getContentResolver()>",
							"<android.content.ContentProvider: boolean isTemporary()>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void <init>(android.content.Context)>",
							"<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>",
							"<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>",
							"<android.content.ContentProvider: android.content.Context getContext()>",
							"android.content.ContentProvider.query"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.createNoteInfo",
				"Candidate Score":95,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider.query",
				"Candidate Score":95,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteProvider.query"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.content.ContentProvider.query",
							"<com.jxl.note.db.NoteProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
							"<android.content.UriMatcher: int match(android.net.Uri)>",
							"<com.jxl.note.db.NoteProvider: java.lang.String whereWithId(long,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>(int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.ContentUris: long parseId(android.net.Uri)>",
							"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
							"<android.content.Context: android.content.ContentResolver getContentResolver()>",
							"<android.content.ContentProvider: boolean isTemporary()>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void <init>(android.content.Context)>",
							"<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>",
							"<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>",
							"<android.content.ContentProvider: android.content.Context getContext()>",
							"android.content.ContentProvider.query"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider.whereWithId",
				"Candidate Score":92,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.content.ContentProvider.query",
							"<com.jxl.note.db.NoteProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
							"<android.content.UriMatcher: int match(android.net.Uri)>",
							"<com.jxl.note.db.NoteProvider: java.lang.String whereWithId(long,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>(int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.ContentUris: long parseId(android.net.Uri)>",
							"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
							"<android.content.Context: android.content.ContentResolver getContentResolver()>",
							"<android.content.ContentProvider: boolean isTemporary()>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void <init>(android.content.Context)>",
							"<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>",
							"<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>",
							"<android.content.ContentProvider: android.content.Context getContext()>",
							"android.content.ContentProvider.query"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent$NoteInfo.<init>",
				"Candidate Score":91,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent$NoteInfo.restore",
				"Candidate Score":91,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent$NoteInfo.toContentValues",
				"Candidate Score":91,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteProvider$DatabaseHelper.<init>",
				"Candidate Score":91,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.content.ContentProvider.query",
							"<com.jxl.note.db.NoteProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
							"<android.content.UriMatcher: int match(android.net.Uri)>",
							"<com.jxl.note.db.NoteProvider: java.lang.String whereWithId(long,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>(int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.ContentUris: long parseId(android.net.Uri)>",
							"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>",
							"<android.content.Context: android.content.ContentResolver getContentResolver()>",
							"<android.content.ContentProvider: boolean isTemporary()>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: void <init>(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void <init>(android.content.Context)>",
							"<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>",
							"<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>",
							"<android.content.ContentProvider: android.content.Context getContext()>",
							"android.content.ContentProvider.query"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent.<init>",
				"Candidate Score":90,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent.query",
				"Candidate Score":90,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteContent.query"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.db.NoteContent$NoteInfo.getAllItems",
				"Candidate Score":89,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.db.NoteContent$NoteInfo.getAllItems"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.NoteList.bindData",
				"Candidate Score":88,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.NoteList.bindData"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.NoteList.onCreate",
				"Candidate Score":87,
				"Reasons":[
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"Unknown",
						"Influenced method":"android.database.sqlite.SQLiteConnection.nativePrepareStatement",
						"Trace":[
							"com.jxl.note.NoteList.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.decryptOld",
				"Candidate Score":86,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.decrypt",
				"Candidate Score":85,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.encrypt",
				"Candidate Score":85,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.getRawKey",
				"Candidate Score":84,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.toByte",
				"Candidate Score":84,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.toHex",
				"Candidate Score":84,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			},
			{
				"Candidate Name":"com.jxl.note.util.Common.appendHex",
				"Candidate Score":83,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.<clinit>",
							"android.database.sqlite.SQLiteOpenHelper.setFilePermissionsForDb",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion1(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion6(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: android.content.ContentValues toContentValues()>",
							"<android.content.ContentValues: void <init>()>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
							"<com.jxl.note.util.Common: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<com.jxl.note.util.Common: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<com.jxl.note.util.Common: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.jxl.note.util.Common: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<java.security.Key: byte[] getEncoded()>",
							"<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>",
							"<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>",
							"<java.security.SecureRandom: void setSeed(byte[])>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>",
							"<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(long)>",
							"<com.jxl.note.util.Common: java.lang.String decryptOld(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.db.NoteContent$NoteInfo: com.jxl.note.db.NoteContent$NoteInfo restore(android.database.Cursor,boolean)>",
							"<android.database.Cursor: long getLong(int)>",
							"<android.database.Cursor: int getInt(int)>",
							"<com.jxl.note.util.Common: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.jxl.note.util.Common: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key)>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.jxl.note.util.Common: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.jxl.note.util.Common: byte[] getRawKey(byte[])>",
							"<android.database.Cursor: java.lang.String getString(int)>",
							"<com.jxl.note.db.NoteContent$NoteInfo: void <init>()>",
							"<com.jxl.note.db.NoteContent: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.System: long currentTimeMillis()>",
							"<android.database.Cursor: void close()>",
							"<android.database.Cursor: boolean moveToNext()>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion3(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void updateVersion2(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onUpgrade",
							"android.database.sqlite.SQLiteOpenHelper.onDowngrade",
							"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>",
							"<com.jxl.note.db.NoteProvider$DatabaseHelper: void createNoteInfo(android.database.sqlite.SQLiteDatabase)>",
							"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>",
							"android.database.sqlite.SQLiteOpenHelper.onCreate",
							"android.database.sqlite.SQLiteOpenHelper.onBeforeDelete",
							"android.database.sqlite.SQLiteOpenHelper.onConfigure",
							"android.database.sqlite.SQLiteOpenHelper.onOpen"
						]
					}
				]
			}
		],
		"None-Code Labels":[]
	}
}