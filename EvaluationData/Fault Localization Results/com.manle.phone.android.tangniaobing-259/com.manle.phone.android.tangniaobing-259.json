{
	"Crash Info in Dataset":{
		"Apk name":"com.manle.phone.android.tangniaobing-259",
		"Method":"android.content.res.Resources.getText",
		"Crash Message":"String resource ID #0x0",
		"stack trace":[
			"android.content.res.Resources.getText",
			"android.content.res.Resources.getString",
			"android.content.Context.getString",
			"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.<init>",
			"com.manle.phone.android.tangniaobing.Welcome.onCreate",
			"android.app.Activity.performCreate",
			"android.app.Instrumentation.callActivityOnCreate",
			"android.app.ActivityThread.performLaunchActivity"
		],
		"Labeled Buggy Method":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.<init>"
	},
	"Fault Localization by CrashTracker":{
		"Regression Message":"\\QString resource ID #0x\\E[\\s\\S]*",
		"Related Variable Type":"ParaAndField",
		"Fault Inducing Paras":[
			0
		],
		"Related Condition Type":"BasicCondition",
		"Conditions":"\"r3 == null\"",
		"ETS-related Type":"KeyVarAndKeyAPI",
		"Buggy Method Candidates":[
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.<init>",
				"Candidate Score":99,
				"Reasons":[
					{
						"Reason Type":"Executed Method 1",
						"Explanation":"Not influence the keyVar but in crash trace",
						"Trace":[
							"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.<init>"
						]
					},
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.Context: java.lang.String getString(int)>",
						"Trace":[
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.mobclick.android.MobclickAgent: android.app.AlertDialog b(android.content.Context,org.json.JSONObject)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppName(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppId(android.content.Context)>",
							"<com.mobclick.android.i: void a(android.content.Context)>",
							"<com.manle.phone.android.tangniaobing.Welcome: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"fw: <android.content.Context: java.lang.String getString(int)>, <android.content.res.Resources: java.lang.String getString(int)>, <android.content.res.Resources: java.lang.CharSequence getText(int)>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					},
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":[
							0
						],
						"Influenced method":"android.content.res.Resources.getText",
						"Trace":[
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>"
						]
					},
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"0",
						"Influenced method":"android.content.res.Resources.getText",
						"Trace":[
							"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.<init>"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.onCreate",
				"Candidate Score":98,
				"Reasons":[
					{
						"Reason Type":"Executed Method 1",
						"Explanation":"Not influence the keyVar but in crash trace",
						"Trace":[
							"com.manle.phone.android.tangniaobing.Welcome.onCreate"
						]
					},
					{
						"Reason Type":"Key Variable Related 1",
						"Explanation":"Influences the value of keyVar by modifying the value of the passed parameters",
						"Influenced parameter id":"0",
						"Influenced method":"android.content.res.Resources.getText",
						"Trace":[
							"com.manle.phone.android.tangniaobing.Welcome.onCreate"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.setNotificationIcon",
				"Candidate Score":95,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					},
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.startService",
				"Candidate Score":95,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1.<init>",
				"Candidate Score":94,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1.run",
				"Candidate Score":94,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.access$000",
				"Candidate Score":93,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.pull.service.tangniaobing.ServiceManager.access$100",
				"Candidate Score":93,
				"Reasons":[
					{
						"Reason Type":"Executed Method 2",
						"Explanation":"Not in the crash stack but has been executedNot in the crash stack but has been executed",
						"Trace":[
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"android.app.ActivityGroup.onCreate",
							"android.app.Activity.getAutofillManager",
							"android.app.Activity.getApplication",
							"<com.manle.phone.android.tangniaobing.Welcome: void onCreate(android.os.Bundle)>",
							"<android.app.Activity: void onCreate(android.os.Bundle)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<d: java.lang.Object doInBackground(java.lang.Object[])>",
							"<d: java.lang.String a(java.lang.Void[])>",
							"<java.lang.Thread: void sleep(long)>",
							"<java.lang.Throwable: void printStackTrace()>",
							"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>",
							"<d: void onPostExecute(java.lang.Object)>",
							"<d: void a(java.lang.String)>",
							"<android.app.Activity: void finish()>",
							"<android.app.Activity: void startActivity(android.content.Intent)>",
							"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>",
							"<android.os.AsyncTask: void onPostExecute(java.lang.Object)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome,c)>",
							"<d: void <init>(com.manle.phone.android.tangniaobing.Welcome)>",
							"<android.os.AsyncTask: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: void run()>",
							"<android.util.Log: int d(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void run()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.Object access$000(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void saveCollectedInfo(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String encrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String toHex(byte[])>",
							"<java.lang.StringBuffer: void <init>(int)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.AESCryptor: void appendHex(java.lang.StringBuffer,byte)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] encrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<java.lang.String: byte[] getBytes()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.IOHelper: void saveFile(java.lang.String,java.lang.String)>",
							"<java.io.FileWriter: void <init>(java.lang.String)>",
							"<java.io.Writer: void close()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>",
							"<java.nio.channels.FileLock: void release()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$300(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void delFile()>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.io.File: boolean delete()>",
							"<java.io.File: boolean exists()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.lang.String postCollectedInfo(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpPost(java.lang.String,java.util.Map)>",
							"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: org.apache.http.HttpEntity createEntity(java.util.Map)>",
							"<java.util.ArrayList: void <init>()>",
							"<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>",
							"<java.lang.String: java.lang.String valueOf(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set keySet()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.HashMap: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.util.QueryUtil access$600(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<android.net.NetworkInfo: boolean isConnected()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: java.lang.String getCollectedInfo(java.lang.String)>",
							"<java.io.File: void <init>(java.lang.String)>",
							"<java.util.ArrayList: void <init>(java.util.Collection)>",
							"<java.util.Arrays: java.util.List asList(java.lang.Object[])>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)>",
							"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.stream.JsonWriter: boolean isLenient()>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.Streams: void write(com.google.gson.JsonElement,boolean,com.google.gson.stream.JsonWriter)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.List: int size()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.io.Writer: void write(int)>",
							"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.lang.String: char charAt(int)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void beforeName()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<java.io.Writer: void write(int)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<com.google.gson.JsonObject: java.util.Set entrySet()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<java.io.Writer: java.io.Writer append(char)>",
							"<com.google.gson.stream.JsonWriter: void newline()>",
							"<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<com.google.gson.JsonArray: java.util.Iterator iterator()>",
							"<java.util.List: java.util.Iterator iterator()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void string(java.lang.String)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<java.lang.Boolean: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<java.lang.Long: long parseLong(java.lang.String)>",
							"<java.lang.Double: java.lang.Double valueOf(double)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<java.math.BigDecimal: void <init>(java.lang.String)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.io.Writer: void write(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: boolean getAsBoolean()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: java.lang.String getAsString()>",
							"<java.lang.Boolean: boolean booleanValue()>",
							"<com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()>",
							"<com.google.gson.JsonPrimitive: boolean isBoolean()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
							"<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()>",
							"<com.google.gson.JsonPrimitive: boolean isNumber()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>",
							"<com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)>",
							"<com.google.gson.stream.JsonWriter: boolean isHtmlSafe()>",
							"<com.google.gson.stream.JsonWriter: void setLenient(boolean)>",
							"<com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonWriter: void <init>(java.io.Writer)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable,com.google.gson.Streams$1)>",
							"<com.google.gson.Streams$AppendableWriter: void <init>(java.lang.Appendable)>",
							"<java.io.Writer: void <init>()>",
							"<com.google.gson.Streams$AppendableWriter$CurrentWrite: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.JsonSerializationContextDefault: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.JsonSerializationVisitor: com.google.gson.JsonElement getJsonElement()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<java.lang.Class: java.lang.Class getSuperclass()>",
							"<com.google.gson.ObjectNavigator: void navigateClassFields(java.lang.Object,java.lang.Class,com.google.gson.ObjectNavigator$Visitor)>",
							"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitObjectField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArrayField(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.TypeUtils: boolean isArray(java.lang.reflect.Type)>",
							"<java.lang.Class: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitFieldUsingCustomHandler(com.google.gson.FieldAttributes,java.lang.reflect.Type,java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.TypeInfoFactory: com.google.gson.TypeInfo getTypeInfoForField(java.lang.reflect.Field,java.lang.reflect.Type)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: void <init>(java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type getActualType(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>",
							"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type extractTypeForHierarchy(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: int getIndex(java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>",
							"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>",
							"<com.google.gson.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.TypeUtils: java.lang.Class wrapWithArray(java.lang.Class)>",
							"<com.google.gson.TypeUtils: java.lang.Class toRawClass(java.lang.reflect.Type)>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>",
							"<com.google.gson.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>",
							"<com.google.gson.TypeInfoFactory: java.lang.reflect.Type[] extractRealTypes(java.lang.reflect.Type[],java.lang.reflect.Type,java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>",
							"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)>",
							"<com.google.gson.FieldAttributes: void <init>(java.lang.Class,java.lang.reflect.Field)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.reflect.Field: int getModifiers()>",
							"<java.lang.reflect.Field: boolean isSynthetic()>",
							"<java.lang.reflect.Field: java.lang.Class getType()>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>",
							"<java.lang.Class: boolean isSynthetic()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<com.google.gson.ObjectTypePair: com.google.gson.ObjectTypePair toMoreSpecificType()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.ObjectTypePair: java.lang.reflect.Type getActualTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Class)>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isPrimitive()>",
							"<com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.google.gson.TypeInfo: java.lang.reflect.Type getActualType()>",
							"<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>",
							"<com.google.gson.TypeInfo: boolean isArray()>",
							"<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>",
							"<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectTypePair: java.lang.Object getObject()>",
							"<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>",
							"<com.google.gson.TypeInfo: java.lang.Class getRawClass()>",
							"<com.google.gson.JsonSerializationVisitor: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonSerializationContext,com.google.gson.MemoryRefStack)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectNavigator: void <init>(com.google.gson.ObjectTypePair,com.google.gson.ExclusionStrategy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonSerializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,boolean,com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MemoryRefStack: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.Stack: void <init>()>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.ObjectNavigatorFactory: void <init>(com.google.gson.ExclusionStrategy,com.google.gson.FieldNamingStrategy2)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.NullExclusionStrategy: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>",
							"<java.util.ArrayList: int size()>",
							"<java.util.ArrayList: boolean add(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.bean.DeviceInfo getDeviceInfo(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>",
							"<android.net.wifi.WifiInfo: java.lang.String getBSSID()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>",
							"<java.util.Date: long getTime()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.Date: void <init>()>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String getNetIpAddress(java.lang.String)>",
							"<java.net.URL: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.io.InputStream: void close()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.BufferedReader: java.lang.String readLine()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.io.BufferedReader: void <init>(java.io.Reader)>",
							"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>",
							"<java.net.URLConnection: java.io.InputStream getInputStream()>",
							"<java.net.HttpURLConnection: int getResponseCode()>",
							"<java.net.URL: java.net.URLConnection openConnection()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.Integer: int parseInt(java.lang.String)>",
							"<java.lang.Object: java.lang.String toString()>",
							"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>",
							"<java.lang.reflect.Field: java.lang.String getName()>",
							"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>",
							"<java.lang.Class: java.lang.Class forName(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<android.telephony.TelephonyManager: int getNetworkType()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<android.net.NetworkInfo: java.lang.String getTypeName()>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: com.manle.phone.android.pull.util.DeviceInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>",
							"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
							"<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
							"<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>",
							"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
							"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.view.Display: int getHeight()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>",
							"<android.view.Display: int getWidth()>",
							"<android.view.WindowManager: android.view.Display getDefaultDisplay()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getMD5(java.lang.String)>",
							"<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getString(byte[])>",
							"<java.lang.StringBuffer: void <init>(java.lang.String)>",
							"<java.lang.StringBuffer: java.lang.String toString()>",
							"<java.lang.Integer: java.lang.String toHexString(int)>",
							"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>",
							"<java.security.MessageDigest: byte[] digest()>",
							"<java.security.MessageDigest: void update(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: java.lang.String setToNoNull(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getChannelName(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppVersion(android.content.Context)>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
							"<com.manle.phone.android.pull.bean.DeviceInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultInstanceCreators()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultDeserializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers()>",
							"<com.google.gson.DefaultTypeAdapters: com.google.gson.ParameterizedTypeHandlerMap getDefaultSerializers(boolean,com.google.gson.LongSerializationPolicy)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerForTypeHierarchy(com.google.gson.Pair)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.List: void add(int,java.lang.Object)>",
							"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfAnOverriddenHandler(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: int size()>",
							"<java.lang.Object: boolean equals(java.lang.Object)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: int getIndexOfSpecificHandlerForTypeHierarchy(java.lang.Class)>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.util.List: int size()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: boolean hasSpecificHandlerFor(java.lang.reflect.Type)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getValue()>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<java.util.Map$Entry: java.lang.Object getKey()>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<java.util.Set: java.util.Iterator iterator()>",
							"<java.util.Map: java.util.Set entrySet()>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy,com.google.gson.DefaultTypeAdapters$1)>",
							"<com.google.gson.DefaultTypeAdapters$LongSerializer: void <init>(com.google.gson.LongSerializationPolicy)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.DefaultTypeAdapters$FloatSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void registerIfAbsent(java.lang.reflect.Type,java.lang.Object)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>",
							"<java.util.Map: boolean containsKey(java.lang.Object)>",
							"<com.google.gson.DefaultTypeAdapters$DoubleSerializer: void <init>(boolean)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.MappedObjectConstructor: void <init>(com.google.gson.ParameterizedTypeHandlerMap)>",
							"<java.lang.Object: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.manle.phone.android.pull.bean.CollectedInfo: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>",
							"<java.io.StringReader: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: void <init>(java.io.Reader)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.NullPointerException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope peekStack()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object get(int)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken objectValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
							"<java.io.Reader: int read(char[],int,int)>",
							"<java.io.EOFException: void <init>(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: void skipToEndOfLine()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.MalformedJsonException: void <init>(java.lang.String)>",
							"<java.io.IOException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.CharSequence getSnippet()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.Math: int min(int,int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.String: char charAt(int)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>",
							"<com.google.gson.stream.JsonReader: char readEscapeCharacter()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.Integer: int parseInt(java.lang.String,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: void push(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken readLiteral()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>",
							"<java.lang.String: void <init>(char[],int,int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object set(int,java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInObject(boolean)>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString(char)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<java.util.List: int size()>",
							"<java.util.List: java.lang.Object remove(int)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextLiteral()>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextInArray(boolean)>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void checkLenient()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonScope pop()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken nextValue()>",
							"<com.google.gson.stream.JsonReader: void replaceTop(com.google.gson.stream.JsonScope)>",
							"<com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()>",
							"<com.google.gson.stream.JsonReader: int nextNonWhitespace()>",
							"<com.google.gson.stream.JsonReader: boolean fillBuffer(int)>",
							"<java.lang.AssertionError: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void decodeLiteral()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)>",
							"<java.lang.Double: double parseDouble(java.lang.String)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.String)>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.RuntimeException: void <init>(java.lang.String)>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)>",
							"<com.google.gson.stream.JsonReader: boolean isLenient()>",
							"<com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.Gson: com.google.gson.ObjectNavigatorFactory createDefaultObjectNavigatorFactory(com.google.gson.ExclusionStrategy)>",
							"<com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)>",
							"<com.google.gson.JsonElement: boolean isJsonNull()>",
							"<com.google.gson.JsonParseException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonPrimitive(java.lang.reflect.Type,com.google.gson.JsonPrimitive,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object constructTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonPrimitive: java.lang.Object getAsObject()>",
							"<java.math.BigInteger: int compareTo(java.math.BigInteger)>",
							"<java.lang.Long: java.lang.Long valueOf(long)>",
							"<java.math.BigInteger: long longValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(int)>",
							"<java.math.BigInteger: int intValue()>",
							"<com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()>",
							"<com.google.gson.JsonElement: boolean isJsonPrimitive()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonObject(java.lang.reflect.Type,com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonObjectDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>",
							"<com.google.gson.JsonElement: boolean isJsonObject()>",
							"<com.google.gson.JsonDeserializationContextDefault: java.lang.Object fromJsonArray(java.lang.reflect.Type,com.google.gson.JsonArray,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonArrayDeserializationVisitor: void <init>(com.google.gson.JsonArray,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: void <init>(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.ObjectNavigatorFactory,com.google.gson.ObjectConstructor,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.JsonDeserializationContext)>",
							"<com.google.gson.JsonDeserializationVisitor: java.lang.Object getTarget()>",
							"<com.google.gson.ObjectNavigator: void accept(com.google.gson.ObjectNavigator$Visitor)>",
							"<com.google.gson.ObjectNavigatorFactory: com.google.gson.ObjectNavigator create(com.google.gson.ObjectTypePair)>",
							"<com.google.gson.ObjectTypePair: void <init>(java.lang.Object,java.lang.reflect.Type,boolean)>",
							"<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>",
							"<com.google.gson.JsonElement: boolean isJsonArray()>",
							"<com.google.gson.JsonDeserializationContextDefault: void <init>(com.google.gson.ObjectNavigatorFactory,com.google.gson.ParameterizedTypeHandlerMap,com.google.gson.MappedObjectConstructor)>",
							"<java.lang.Object: void <init>()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonIOException: void <init>(java.lang.Throwable)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.Streams: com.google.gson.JsonElement parseRecursive(com.google.gson.stream.JsonReader)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: void endObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>",
							"<com.google.gson.Preconditions: void checkNotNull(java.lang.Object)>",
							"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextName()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.stream.JsonReader: void beginObject()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonObject: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.LinkedHashMap: void <init>()>",
							"<com.google.gson.stream.JsonReader: void endArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<java.util.List: boolean add(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: boolean hasNext()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: void beginArray()>",
							"<com.google.gson.stream.JsonReader: void expect(com.google.gson.stream.JsonToken)>",
							"<com.google.gson.JsonArray: void <init>()>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<com.google.gson.JsonNull: com.google.gson.JsonNull createJsonNull()>",
							"<com.google.gson.stream.JsonReader: void nextNull()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<java.lang.Character: char charValue()>",
							"<com.google.gson.Preconditions: void checkArgument(boolean)>",
							"<com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>",
							"<java.lang.String: java.lang.String valueOf(char)>",
							"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>",
							"<com.google.gson.stream.JsonReader: boolean nextBoolean()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken quickPeek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.JsonPrimitive: java.lang.Number stringToNumber(java.lang.String)>",
							"<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>",
							"<com.google.gson.JsonElement: void <init>()>",
							"<com.google.gson.JsonPrimitive: void setValue(java.lang.Object)>",
							"<com.google.gson.stream.JsonReader: java.lang.String nextString()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()>",
							"<com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken advance()>",
							"<java.lang.IllegalStateException: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.IllegalArgumentException: void <init>()>",
							"<java.lang.Enum: int ordinal()>",
							"<com.google.gson.stream.JsonReader: void setLenient(boolean)>",
							"<java.lang.Class: java.lang.Object cast(java.lang.Object)>",
							"<com.google.gson.Primitives: java.lang.Class wrap(java.lang.Class)>",
							"<com.google.gson.Primitives: java.lang.Class checkNotNull(java.lang.Class)>",
							"<java.util.Map: java.lang.Object get(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.AESCryptor: java.lang.String decrypt(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] getRawKey(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.lang.String: void <init>(byte[])>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] decrypt(byte[],byte[])>",
							"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>",
							"<javax.crypto.Cipher: byte[] doFinal(byte[])>",
							"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>",
							"<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>",
							"<java.lang.String: byte[] getBytes()>",
							"<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>",
							"<com.manle.phone.android.pull.util.AESCryptor: byte[] toByte(java.lang.String)>",
							"<java.lang.String: int length()>",
							"<java.lang.Integer: byte byteValue()>",
							"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>",
							"<java.lang.String: java.lang.String substring(int,int)>",
							"<com.manle.phone.android.pull.util.IOHelper: java.lang.String readFile(java.lang.String)>",
							"<java.io.FileReader: void <init>(java.lang.String)>",
							"<java.io.StringWriter: java.lang.String toString()>",
							"<com.manle.phone.android.pull.util.IOHelper: void copy(java.io.Reader,java.io.Writer)>",
							"<java.io.Reader: int read()>",
							"<java.io.Writer: void write(int)>",
							"<java.io.StringWriter: void <init>()>",
							"<java.io.File: boolean exists()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$400()>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: com.manle.phone.android.pull.util.CollectedInfoUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.CollectedInfoUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.google.gson.Gson: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: android.content.Context access$500(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileLock access$302(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileLock)>",
							"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$100(com.manle.phone.android.pull.common.StartupHook)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.nio.channels.FileChannel access$102(com.manle.phone.android.pull.common.StartupHook,java.nio.channels.FileChannel)>",
							"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>",
							"<java.io.FileOutputStream: void <init>(java.lang.String)>",
							"<com.manle.phone.android.pull.common.StartupHook: java.lang.String access$200(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.common.StartupHook$1: void <init>(com.manle.phone.android.pull.common.StartupHook)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.common.StartupHook: com.manle.phone.android.pull.common.StartupHook getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.common.StartupHook: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalCache: java.lang.Object getLock()>",
							"<com.manle.phone.android.pull.util.GlobalCache: com.manle.phone.android.pull.util.GlobalCache getInstance()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalCache: void <init>()>",
							"<java.lang.Object: void <init>()>",
							"<java.util.ArrayList: void <init>()>",
							"<java.util.HashMap: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.io.File: java.lang.String getAbsolutePath()>",
							"<android.content.Context: java.io.File getFilesDir()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.os.Bundle: java.lang.Object get(java.lang.String)>",
							"<android.os.Bundle: boolean containsKey(java.lang.String)>",
							"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>",
							"<android.content.Context: java.lang.String getPackageName()>",
							"<android.content.Context: android.content.pm.PackageManager getPackageManager()>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.Context: android.content.Context getApplicationContext()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void startService()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void <init>(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager$1: void run()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: android.content.Context access$000(com.manle.phone.android.pull.service.tangniaobing.ServiceManager)>",
							"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
							"<android.content.Intent: void <init>(java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: java.lang.String access$100()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: boolean isNotificationEnabled(android.content.Context)>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
							"<java.lang.String: boolean equals(java.lang.Object)>",
							"<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
							"<java.util.HashMap: boolean containsKey(java.lang.Object)>",
							"<com.manle.phone.android.pull.util.QueryUtil: java.util.HashMap getRule()>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.util.HashMap: void clear()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
							"<org.json.JSONObject: java.lang.String getString(java.lang.String)>",
							"<java.util.Iterator: java.lang.Object next()>",
							"<java.util.Iterator: boolean hasNext()>",
							"<org.json.JSONObject: java.util.Iterator keys()>",
							"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>",
							"<org.json.JSONObject: void <init>(java.lang.String)>",
							"<java.util.HashMap: void <init>()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String httpGet(java.lang.String)>",
							"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
							"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
							"<java.lang.Throwable: java.lang.String getMessage()>",
							"<android.util.Log: int e(java.lang.String,java.lang.String)>",
							"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
							"<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
							"<org.apache.http.StatusLine: int getStatusCode()>",
							"<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
							"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
							"<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>",
							"<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
							"<org.apache.http.params.BasicHttpParams: void <init>()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<com.manle.phone.android.pull.util.QueryUtil: com.manle.phone.android.pull.util.QueryUtil getInstance(android.content.Context)>",
							"<com.manle.phone.android.pull.util.NetworkUtil: boolean getNetStatus(android.content.Context)>",
							"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.Thread: void start()>",
							"<java.lang.Thread: void <init>(java.lang.Runnable)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"<java.lang.Object: void <init>()>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void setNotificationIcon(int)>",
							"<android.content.SharedPreferences$Editor: boolean commit()>",
							"<java.lang.Package: java.lang.String getName()>",
							"<java.lang.Class: java.lang.Package getPackage()>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getVersion()>",
							"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
							"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>",
							"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<java.lang.Class: java.lang.String getName()>",
							"<java.lang.Object: java.lang.Class getClass()>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.util.Log: int i(java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String setAppId(java.lang.String)>",
							"<android.content.Context: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: int getResid(android.content.Context,java.lang.String,java.lang.String)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: com.manle.phone.android.pull.util.GlobalUtil getInstance()>",
							"<android.widget.TextView: void setText(java.lang.CharSequence)>",
							"<java.lang.StringBuilder: java.lang.String toString()>",
							"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>",
							"<java.lang.StringBuilder: void <init>()>",
							"<android.app.Activity: android.view.View findViewById(int)>",
							"<java.lang.String: java.lang.String toString()>",
							"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>",
							"<android.content.ContextWrapper: java.lang.String getPackageName()>",
							"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>",
							"<android.app.Activity: void setContentView(int)>",
							"android.app.Activity.onCreate"
						]
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.getText",
				"Candidate Score":74,
				"Reasons":[
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.Context: java.lang.CharSequence getText(int)>",
						"Trace":[
							"<com.manle.phone.android.tangniaobing.ListView: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.NotificationService: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.pull.common.NotificationSettingsActivity: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.tangniaobing.Index: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.tangniaobing.Welcome: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.pull.common.RecommendAppList: java.lang.CharSequence getText(int)>",
							"<com.manle.phone.android.pull.common.NotificationDetailsActivity: java.lang.CharSequence getText(int)>",
							"fw: <android.content.Context: java.lang.CharSequence getText(int)>, <android.content.res.Resources: java.lang.CharSequence getText(int)>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.getAssets",
				"Candidate Score":73,
				"Reasons":[
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.ContextWrapper: android.content.res.AssetManager getAssets()>",
						"Trace":[
							"<com.manle.phone.android.tangniaobing.ListView: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.pull.service.tangniaobing.NotificationService: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.pull.common.NotificationSettingsActivity: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.tangniaobing.Index: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.tangniaobing.Welcome: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.pull.common.RecommendAppList: android.content.res.AssetManager getAssets()>",
							"<com.manle.phone.android.pull.common.NotificationDetailsActivity: android.content.res.AssetManager getAssets()>",
							"fw: <android.content.ContextWrapper: android.content.res.AssetManager getAssets()>, <com.android.internal.policy.DecorContext: android.content.res.AssetManager getAssets()>, <android.content.res.Resources: android.content.res.AssetManager getAssets()>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.getString",
				"Candidate Score":73,
				"Reasons":[
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.Context: java.lang.String getString(int)>",
						"Trace":[
							"<com.manle.phone.android.pull.util.DeviceInfoUtil: void <init>(android.content.Context)>",
							"<com.manle.phone.android.pull.util.QueryUtil: void init(android.content.Context)>",
							"<com.mobclick.android.MobclickAgent: android.app.AlertDialog b(android.content.Context,org.json.JSONObject)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppName(android.content.Context)>",
							"<com.manle.phone.android.pull.util.GlobalUtil: java.lang.String getAppId(android.content.Context)>",
							"<com.mobclick.android.i: void a(android.content.Context)>",
							"<com.manle.phone.android.tangniaobing.Welcome: java.lang.String getString(int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.ServiceManager: void <init>(android.content.Context)>",
							"fw: <android.content.Context: java.lang.String getString(int)>, <android.content.res.Resources: java.lang.String getString(int)>, <android.content.res.Resources: java.lang.CharSequence getText(int)>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.createPackageContext",
				"Candidate Score":71,
				"Reasons":[
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>",
						"Trace":[
							"<com.manle.phone.android.tangniaobing.ListView: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.pull.service.tangniaobing.NotificationService: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.pull.common.NotificationSettingsActivity: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.tangniaobing.Index: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.tangniaobing.Welcome: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.pull.common.RecommendAppList: android.content.Context createPackageContext(java.lang.String,int)>",
							"<com.manle.phone.android.pull.common.NotificationDetailsActivity: android.content.Context createPackageContext(java.lang.String,int)>",
							"fw: <android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>, <android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)>, <android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>, <android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>, <android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					}
				]
			},
			{
				"Candidate Name":"com.manle.phone.android.tangniaobing.Welcome.obtainStyledAttributes",
				"Candidate Score":71,
				"Reasons":[
					{
						"Reason Type":"Key API Related",
						"Explanation":"Caller of keyAPI <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>",
						"Trace":[
							"<com.manle.phone.android.tangniaobing.ListView: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.pull.service.tangniaobing.NotificationService: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.pull.common.NotificationSettingsActivity: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.tangniaobing.Index: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.tangniaobing.Welcome: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.pull.common.RecommendAppList: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"<com.manle.phone.android.pull.common.NotificationDetailsActivity: android.content.res.TypedArray obtainStyledAttributes(int[])>",
							"fw: <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int)>, <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int)>, <android.content.res.ResourcesImpl$ThemeImpl: android.content.res.TypedArray obtainStyledAttributes(android.content.res.Resources$Theme,android.util.AttributeSet,int,int,int)>, <android.content.res.TypedArray: android.content.res.TypedArray obtain(android.content.res.Resources,int)>, <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>, key field: <android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>, <android.content.res.Resources: java.lang.CharSequence getText(int)>"
						],
						"Influenced Field":[
							"android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl"
						],
						"Signaler":"android.content.res.Resources.getText"
					}
				]
			}
		],
		"None-Code Labels":[
			"Asset",
			"Resource XML"
		]
	}
}